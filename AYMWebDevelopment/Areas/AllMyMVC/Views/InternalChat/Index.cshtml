
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout5.cshtml";
}

<input type="hidden" id="EmployeeAutoCode" value="AutoCode" />
<input type="hidden" id="EmployeeTypeName" value="TypeName" />
<input type="hidden" id="counter" />


<div class="container">
    @*<input type="text" id="message" />*@
    <center>
        <table class="mytable1" style="text-align:center; width:100%">

            <tr class="fields">
                <td colspan="3">
                    <form method="post">
                        @Html.Editor("date1", new { htmlAttributes = new { @placeholder = "Date From", @required = "required" } }) <span>&nbsp; === &nbsp;</span> @Html.Editor("date2", new { htmlAttributes = new { @placeholder = "Date To", @required = "required" } }) <br /> <br /> <input type="submit" id="updatebydate" value="Update By Dates" class="btn-block" onclick="return confirm('Are you sure you would like Update By Dates?');" />
                    </form>
                </td>
            </tr>
            <tr>
                <td colspan="3">
                    <span>--------------</span>
                </td>
            </tr>
            <tr>
                <td colspan="3">
                    <input type="button" id="UpdateChatToday" value="Update Today" class="btn btn-outline-danger" onclick="return confirm('Are you sure you would like Update Today?');" />
                </td>
            </tr>
            @*<tr>
            <td colspan="3">
                @using (Ajax.BeginForm(new AjaxOptions { HttpMethod = "POST" }))
                {
                    <input type="text" id="date1" placeholder="From" required /> <span>&nbsp; -&nbsp;</span> <input type="text" id="date2" placeholder="To" required /> <input type="submit" id="updatebydate" value="Update" class="btn-light" onclick="return confirm('Are you sure you would like Update By Dates?');" />
                    @Html.Editor("date1", new { htmlAttributes = new { @placeholder = "From", @required = "required" } }) <span>&nbsp; -&nbsp;</span> @Html.Editor("date2", new { htmlAttributes = new { @placeholder = "To", @required = "required" } }) <input type="submit" id="updatebydate" value="Update" class="btn-light" onclick="return confirm('Are you sure you would like Update By Dates?');" />
                }
                </td>
        </tr>*@
            <tr>
                <td colspan="3">
                    <span>--------------</span>
                </td>
            </tr>
            <tr>
                <td>
                    <input type="button" id="warnme" value="Warn" class="btn btn-outline-warning" />
                </td>
                <td>
                    <textarea id="message" rows="4" cols="90" style="border-radius:5px"></textarea>
                </td>
                <td>
                    <input type="button" id="sendmessage" value="Send" class="btn btn-outline-success" />
                </td>
            </tr>
        </table>
        <br />
    </center>
    <div style="border:5px solid gray">
        <h4 style="text-align:center">Chat History</h4>
        <ul id="discussion" style="background-color:lightgray">
        </ul>
    </div>
</div>

@section scripts1 {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(document).ready(function () {
            $("#date1 , #date2").prop('readonly',true);
            $("#date1 , #date2").removeClass('hasDatepicker');
            $("#date1").datepicker({
                dateFormat: 'yy-mm-dd',
                changeYear: true,
                changeMonth: true,

                onSelect: function (selected) {
                    $("#date2").datepicker("option", "minDate", selected)
                }
            });
            $("#date2").datepicker({
                dateFormat: 'yy-mm-dd',
                changeYear: true,
                changeMonth: true,

                onSelect: function (selected) {
                    $("#date1").datepicker("option", "maxDate", selected)
                }
            });

            $("#date1, #date2").attr('autocomplete', 'off');
            $('#counter').val(0);
             var url = '@Url.Action("GetSenderAutoCode", "InternalChat", new { Area="AllMyMVC"}, null)';
            $.getJSON(url, function (data, statuscode, xhr) {
                    if (data.EmployeeAutoCode == "0" || data.EmployeeAutoCode==null ) {
                        alert("An Internal Error, Please Contact the Web Developer1");
                    }
                    else {
                        $('#EmployeeTypeName').val(data.EmployeeTypeName);
                        $('#EmployeeAutoCode').val(data.EmployeeAutoCode);
                        //SenddMessageSSND("../Images/Sounds/SKYPECONNECTIONSOUND.mp3");
                }
                });


            //
           $("#UpdateChatToday").on("click",function () {
               $("#discussion").empty();
               var url = '@Url.Action("UpdateChatToday", "InternalChat", new { Area="AllMyMVC"}, null)'
               $.post(url, function (data, statuscode, xhr) {
                //console.log(data);
                //console.log(statuscode);
                //console.log(xhr);
                   $('#counter').val(0);
                   $.each(data, function (index) {
                       $('#counter').val(parseInt($('#counter').val()) + 1);

                       var mycurrentdate = myfunctionDateConvert(data[index].DateOfMaking);

                       $('#discussion').append('<li>' + '(' + $('#counter').val() + ') ' + htmlEncode(data[index].EmployeeTypeName) + ' :' + '<strong>' + htmlEncode(data[index].EmployeeAutoCode) + '</strong>: ' + htmlEncode(mycurrentdate) + '<br>'
                           + htmlEncode(data[index].TextMessage) + '</li>');
                   });
                   $('#message').val('').focus();
               });

           });

            //$("#date1").on("change", function () {
            //    var first = document.getElementById('date1');
            //    if (first.value !=="") {
            //        $(this).css("border-color", "green");
            //    }
            //    else {
            //        $(this).css("border-color", "red");
            //    }
            //});

            //$("#date2").on("change", function () {
            //    var first = document.getElementById('date2');
            //    if (first.value !=="") {
            //        $(this).css("border-color", "green");
            //    }
            //    else {
            //        $(this).css("border-color", "red");
            //    }
            //});

            $("#updatebydate").on("click", function (e) {
                e.preventDefault();
                var first = document.getElementById('date1');
                var second = document.getElementById('date2');
                if (first.value === "" && second.value === "") {
                    $("#date1, #date2").css("border-color", "red");
                }
                else if (first.value === "") {
                    $("#date1").css("border-color", "red");
                }
                else if (second.value === "") {
                    $("#date2").css("border-color", "red");
                }
                else {
                    $("#date1, #date2").css("border-color", "green");

               $("#discussion").empty();
               var url = '@Url.Action("UpdateChatByDates", "InternalChat", new { Area="AllMyMVC"}, null)'
                $.post(url, { DateFrom: $('#date1').val(), DateTO: $('#date2').val() }, function (data, statuscode, xhr) {
                //console.log(data);
                //console.log(statuscode);
                //console.log(xhr);
                   $('#counter').val(0);
                   $.each(data, function (index) {
                       $('#counter').val(parseInt($('#counter').val() +1) );

                       var mycurrentdate = myfunctionDateConvert(data[index].DateOfMaking);

                    $('#discussion').append('<li>' + '(' + $('#counter').val() + ') ' + htmlEncode(data[index].EmployeeTypeName) + ' :' + '<strong>' + htmlEncode(data[index].EmployeeAutoCode) + '</strong>: ' + htmlEncode(mycurrentdate) + '<br>'
                           + htmlEncode(data[index].TextMessage) + '</li>');
                   });
                    $('#message').val('').focus();
                });

                }
        });
            //


            $("#sendmessage").on("mouseover", function (e) {
                var x = document.getElementById('message').value;
                if (x ==="") {
                    $(this).prop("disabled",true);
                }
                else {
                    $(this).prop("disabled", false);
                }
            });

            $("#message").on("keyup", function (e) {
                var x = document.getElementById('message').value;
                if (x === "") {
                    $("#sendmessage").prop("disabled", true);
                }
                else {
                    $("#sendmessage").prop("disabled", false);
                }
            });

            $("#sendmessage").on("keyup", function (e) {
                var x = document.getElementById('message').value;
                if (e.which == 9 && x==="" ) {
                    $("#sendmessage").prop("disabled", true);
                }
            });
            //

            // end of ready
        });

        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (Type, AutoCode, message) {
                // Add the message to the page.
                // Use of Date.now() function
                var mycurrentdate = myfunctionDateNow();

                $('#counter').val(parseInt($('#counter').val()) + 1);
                $('#discussion').append('<li>' + '(' + $('#counter').val() + ') ' + htmlEncode(Type) + ' :' + '<strong>' + htmlEncode(AutoCode) + '</strong>: ' + htmlEncode(mycurrentdate)+ '<br>'
                    + htmlEncode(message) + '</li>');
            };
            // Get the user name and store it to prepend to messages.

            //$('#displayname').val(prompt('Enter your name:', ''));

            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
             $('#sendmessage').on("click",function () {
             var url = '@Url.Action("AddNewMessage", "InternalChat", new { Area="AllMyMVC"}, null)';
                $.post(url, { EmployeeText: $("#message").val() }, function (data, statuscode, xhr) {
                    if (data != "OK") {
                        alert("An Internal Error, Please Contact the Web Developer2");
                    }
                    else {
                        $.connection.hub.start().done(function () {
                            // Call the Send method on the hub.
                            chat.server.send($('#EmployeeTypeName').val(), $('#EmployeeAutoCode').val(), $('#message').val());
                            // Clear text box and reset focus for next comment.
                            $('#message').val('').focus();
                        });
                        // code
                    }
                    SenddMessageSSND("../Images/Sounds/MSNSound.mp3");
                });
             });

            $("#warnme").on("click", function () {
            var warning = "Warning Alarm!";
            var url = '@Url.Action("AddNewMessage", "InternalChat", new { Area="AllMyMVC"}, null)';
            $.post(url, { EmployeeText: warning }, function (data, statuscode, xhr) {
                    if (data != "OK") {
                        alert("An Internal Error, Please Contact the Web Developer3");
                    }
                    else {
                        // code
                        $.connection.hub.start().done(function () {
                            // Call the Send method on the hub.
                            chat.server.send($('#EmployeeTypeName').val(), $('#EmployeeAutoCode').val(), warning);
                            // Clear text box and reset focus for next comment.
                            $('#message').val('').focus();
                        });
                }
                SenddMessageSSND("../Images/Sounds/SonnerieSkypeSoundEffect.mp3");
            });
        });

        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }





    </script>
    <script>
        function SenddMessageSSND(url) {
            new Audio(url).play();
        }

        function myfunctionDateNow() {
            var today = new Date();
            var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
            var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
            var dateTime = date + ' ' + time;
            return dateTime;
        }

        function myfunctionDateConvert(mydate) {
            var today = new Date(mydate);
            var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
            var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
            var dateTime = date + ' ' + time;
            return dateTime;
        }
    </script>

}